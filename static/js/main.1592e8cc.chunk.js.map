{"version":3,"sources":["Components/Modal.js","Components/Breadcrumbs.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","useState","open","setOpen","folder","setFolder","handleClose","modalopen","useEffect","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","type","onChange","e","target","value","DialogActions","Button","onClick","saveFolder","color","Breadcrumbs","path","setPath","clickedPath","clickedfolder","className","map","item","index","innerText","newDirectory","p","length","pathHandler","App","setModalopen","setClickedfolder","React","folderstructure","setFolderstrucuture","currentPath","setCurrentPath","name","forEach","hidden","folderitem","style","fontSize","paddingLeft","onDoubleClick","foldername","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1592e8cc.chunk.js","sourcesContent":["import React ,{useState,useEffect}from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function Modal(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [folder, setFolder] =useState();\r\n \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.modalopen();\r\n  };\r\n\r\nconst folderName=(e)=>{\r\n    setFolder(e.target.value)\r\n}\r\n\r\nconst saveFolder=()=>{\r\n    setOpen(false);\r\n    props.modalopen();\r\n    props.saveFolder(folder);\r\n}\r\n\r\nuseEffect(()=>{\r\nhandleClickOpen();\r\n\r\n},[])\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n        <DialogTitle id=\"form-dialog-title\">Type Folder name</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Folder Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={folderName}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n         \r\n          <Button onClick={saveFolder} color=\"primary\">\r\n            Create Folder\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>      \r\n    </div>\r\n  );\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\n\r\nfunction Breadcrumbs(props) {\r\n    const [path,setPath]=useState(['Home']);\r\n\r\n    var clickedPath=props.clickedfolder;\r\n\r\n    useEffect(() => {\r\n        clickedPath &&\r\n    setPath([...path,clickedPath])\r\n       \r\n    },[clickedPath])\r\n\r\nconst pathHandler=(e,index)=>{\r\n    var value=(e.target.innerText);\r\n    props.newDirectory(value);\r\n    var p=[...path];\r\n    p.length=index+1;\r\n    setPath(p);\r\n}\r\n\r\n    return (\r\n        <div className=\"bar\">\r\n\r\n            {path.map((item,index)=>{\r\n                return(\r\n                    <div key ={index}>\r\n                    <span className=\"breadcrumb\" onClick={(e)=>pathHandler(e,index)}>{item}</span>{\" \"} /\r\n                    </div>\r\n                )\r\n\r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Breadcrumbs\r\n","import './App.css';\nimport React,{useState} from 'react';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport FolderTwoToneIcon from '@material-ui/icons/FolderTwoTone';\nimport Modal from './Components/Modal'\nimport Breadcrumbs from './Components/Breadcrumbs'\n\nfunction App() {\nconst[modalopen,setModalopen]=useState(false);\nconst[clickedfolder,setClickedfolder]=useState();\nconst [folderstructure, setFolderstrucuture] = React.useState([]);\nconst[currentPath,setCurrentPath]=useState('Home');\n\n\nconst openDialog=()=>{\n  modalopen?setModalopen(false):setModalopen(true)\n}\n\n\nconst handleClose=()=>{\n  setModalopen(false);\n}\n\nconst saveFolder=(name)=>{\n  setFolderstrucuture([...folderstructure,{name:name,currentPath: currentPath,hidden:false}])\n}\n\nconst newDirectory =(name)=>{\n  folderstructure.forEach((item)=>{\n     item.currentPath===name?item.hidden=false:item.hidden=true;\n\n  })\n  setFolderstrucuture([...folderstructure]);\n}\n\nconst insideFolder=(foldername)=>{\n  setCurrentPath(foldername);\nsetClickedfolder(foldername);\nnewDirectory(foldername);\n}\n\n\n  return (\n    <div>\n       <Breadcrumbs clickedfolder={clickedfolder} newDirectory={newDirectory}/>\n    <div className=\"App\">\n      {folderstructure &&  folderstructure.map((folderitem,index)=>{\n        if(!folderitem.hidden)\n        return <div key={index} >  \n          <FolderTwoToneIcon color=\"primary\"\n      style={{ fontSize: 100,paddingLeft:15 }}\n      onDoubleClick={()=>insideFolder(folderitem.name)}\n      />\n      <div className=\"name\">{folderitem.name}</div>\n      </div>\n      \n      })}\n    \n\n  <div className=\"addfolder\" onClick={openDialog}>\n      <AddBoxRoundedIcon color=\"action\" style= {{ fontSize: 120,paddingLeft:15}}></AddBoxRoundedIcon>\n</div>\n</div>\n{\n  modalopen &&\n  <Modal modalopen={handleClose} saveFolder={saveFolder}/>\n}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}